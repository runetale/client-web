// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v3.20.3
// source: runetale/runetale/v1/login.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
import { Empty } from "../../../google/protobuf/empty";

export const protobufPackage = "protos";

export interface LoginNodeResponse {
  isRegistered: boolean;
  loginUrl: string;
  ip: string;
  cidr: string;
  signalHost: string;
  signalPort: number;
}

export interface LoginSessionResponse {
  /** host ip */
  ip: string;
  /** host wireguard cidr */
  cidr: string;
  /** host name */
  host: string;
  /** host os */
  os: string;
  signalServerHost: string;
  signalServerPort: number;
}

export interface GetInvitationRequest {
  inviteCode: string;
}

export interface GetInvitationResponse {
  email: string;
  inviteCode: string;
}

function createBaseLoginNodeResponse(): LoginNodeResponse {
  return { isRegistered: false, loginUrl: "", ip: "", cidr: "", signalHost: "", signalPort: 0 };
}

export const LoginNodeResponse: MessageFns<LoginNodeResponse> = {
  encode(message: LoginNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isRegistered !== false) {
      writer.uint32(8).bool(message.isRegistered);
    }
    if (message.loginUrl !== "") {
      writer.uint32(18).string(message.loginUrl);
    }
    if (message.ip !== "") {
      writer.uint32(26).string(message.ip);
    }
    if (message.cidr !== "") {
      writer.uint32(34).string(message.cidr);
    }
    if (message.signalHost !== "") {
      writer.uint32(42).string(message.signalHost);
    }
    if (message.signalPort !== 0) {
      writer.uint32(48).uint64(message.signalPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isRegistered = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.loginUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cidr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signalHost = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signalPort = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginNodeResponse {
    return {
      isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false,
      loginUrl: isSet(object.loginUrl) ? globalThis.String(object.loginUrl) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      cidr: isSet(object.cidr) ? globalThis.String(object.cidr) : "",
      signalHost: isSet(object.signalHost) ? globalThis.String(object.signalHost) : "",
      signalPort: isSet(object.signalPort) ? globalThis.Number(object.signalPort) : 0,
    };
  },

  toJSON(message: LoginNodeResponse): unknown {
    const obj: any = {};
    if (message.isRegistered !== false) {
      obj.isRegistered = message.isRegistered;
    }
    if (message.loginUrl !== "") {
      obj.loginUrl = message.loginUrl;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.cidr !== "") {
      obj.cidr = message.cidr;
    }
    if (message.signalHost !== "") {
      obj.signalHost = message.signalHost;
    }
    if (message.signalPort !== 0) {
      obj.signalPort = Math.round(message.signalPort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginNodeResponse>, I>>(base?: I): LoginNodeResponse {
    return LoginNodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginNodeResponse>, I>>(object: I): LoginNodeResponse {
    const message = createBaseLoginNodeResponse();
    message.isRegistered = object.isRegistered ?? false;
    message.loginUrl = object.loginUrl ?? "";
    message.ip = object.ip ?? "";
    message.cidr = object.cidr ?? "";
    message.signalHost = object.signalHost ?? "";
    message.signalPort = object.signalPort ?? 0;
    return message;
  },
};

function createBaseLoginSessionResponse(): LoginSessionResponse {
  return { ip: "", cidr: "", host: "", os: "", signalServerHost: "", signalServerPort: 0 };
}

export const LoginSessionResponse: MessageFns<LoginSessionResponse> = {
  encode(message: LoginSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip !== "") {
      writer.uint32(10).string(message.ip);
    }
    if (message.cidr !== "") {
      writer.uint32(18).string(message.cidr);
    }
    if (message.host !== "") {
      writer.uint32(26).string(message.host);
    }
    if (message.os !== "") {
      writer.uint32(34).string(message.os);
    }
    if (message.signalServerHost !== "") {
      writer.uint32(42).string(message.signalServerHost);
    }
    if (message.signalServerPort !== 0) {
      writer.uint32(48).uint64(message.signalServerPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cidr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signalServerHost = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signalServerPort = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginSessionResponse {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      cidr: isSet(object.cidr) ? globalThis.String(object.cidr) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      os: isSet(object.os) ? globalThis.String(object.os) : "",
      signalServerHost: isSet(object.signalServerHost) ? globalThis.String(object.signalServerHost) : "",
      signalServerPort: isSet(object.signalServerPort) ? globalThis.Number(object.signalServerPort) : 0,
    };
  },

  toJSON(message: LoginSessionResponse): unknown {
    const obj: any = {};
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.cidr !== "") {
      obj.cidr = message.cidr;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.os !== "") {
      obj.os = message.os;
    }
    if (message.signalServerHost !== "") {
      obj.signalServerHost = message.signalServerHost;
    }
    if (message.signalServerPort !== 0) {
      obj.signalServerPort = Math.round(message.signalServerPort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginSessionResponse>, I>>(base?: I): LoginSessionResponse {
    return LoginSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginSessionResponse>, I>>(object: I): LoginSessionResponse {
    const message = createBaseLoginSessionResponse();
    message.ip = object.ip ?? "";
    message.cidr = object.cidr ?? "";
    message.host = object.host ?? "";
    message.os = object.os ?? "";
    message.signalServerHost = object.signalServerHost ?? "";
    message.signalServerPort = object.signalServerPort ?? 0;
    return message;
  },
};

function createBaseGetInvitationRequest(): GetInvitationRequest {
  return { inviteCode: "" };
}

export const GetInvitationRequest: MessageFns<GetInvitationRequest> = {
  encode(message: GetInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inviteCode !== "") {
      writer.uint32(10).string(message.inviteCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inviteCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInvitationRequest {
    return { inviteCode: isSet(object.inviteCode) ? globalThis.String(object.inviteCode) : "" };
  },

  toJSON(message: GetInvitationRequest): unknown {
    const obj: any = {};
    if (message.inviteCode !== "") {
      obj.inviteCode = message.inviteCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInvitationRequest>, I>>(base?: I): GetInvitationRequest {
    return GetInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInvitationRequest>, I>>(object: I): GetInvitationRequest {
    const message = createBaseGetInvitationRequest();
    message.inviteCode = object.inviteCode ?? "";
    return message;
  },
};

function createBaseGetInvitationResponse(): GetInvitationResponse {
  return { email: "", inviteCode: "" };
}

export const GetInvitationResponse: MessageFns<GetInvitationResponse> = {
  encode(message: GetInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.inviteCode !== "") {
      writer.uint32(18).string(message.inviteCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inviteCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInvitationResponse {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      inviteCode: isSet(object.inviteCode) ? globalThis.String(object.inviteCode) : "",
    };
  },

  toJSON(message: GetInvitationResponse): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.inviteCode !== "") {
      obj.inviteCode = message.inviteCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInvitationResponse>, I>>(base?: I): GetInvitationResponse {
    return GetInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInvitationResponse>, I>>(object: I): GetInvitationResponse {
    const message = createBaseGetInvitationResponse();
    message.email = object.email ?? "";
    message.inviteCode = object.inviteCode ?? "";
    return message;
  },
};

export interface LoginService {
  LoginNode(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<LoginNodeResponse>;
  LoginSession(request: Observable<DeepPartial<Empty>>, metadata?: grpc.Metadata): Observable<LoginSessionResponse>;
  GetInvitation(request: DeepPartial<GetInvitationRequest>, metadata?: grpc.Metadata): Promise<GetInvitationResponse>;
}

export class LoginServiceClientImpl implements LoginService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.LoginNode = this.LoginNode.bind(this);
    this.LoginSession = this.LoginSession.bind(this);
    this.GetInvitation = this.GetInvitation.bind(this);
  }

  LoginNode(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<LoginNodeResponse> {
    return this.rpc.unary(LoginServiceLoginNodeDesc, Empty.fromPartial(request), metadata);
  }

  LoginSession(request: Observable<DeepPartial<Empty>>, metadata?: grpc.Metadata): Observable<LoginSessionResponse> {
    throw new Error("ts-proto does not yet support client streaming!");
  }

  GetInvitation(request: DeepPartial<GetInvitationRequest>, metadata?: grpc.Metadata): Promise<GetInvitationResponse> {
    return this.rpc.unary(LoginServiceGetInvitationDesc, GetInvitationRequest.fromPartial(request), metadata);
  }
}

export const LoginServiceDesc = { serviceName: "protos.LoginService" };

export const LoginServiceLoginNodeDesc: UnaryMethodDefinitionish = {
  methodName: "LoginNode",
  service: LoginServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return Empty.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LoginNodeResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LoginServiceGetInvitationDesc: UnaryMethodDefinitionish = {
  methodName: "GetInvitation",
  service: LoginServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetInvitationRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetInvitationResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
