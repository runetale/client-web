// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v3.20.3
// source: runetale/runetale/v1/session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "protos";

export interface VerifyLoginSessionRequest {
  sessionID: string;
  platform: string;
}

export interface VerifyLoginSessionResponse {
  ip: string;
  host: string;
  os: string;
}

function createBaseVerifyLoginSessionRequest(): VerifyLoginSessionRequest {
  return { sessionID: "", platform: "" };
}

export const VerifyLoginSessionRequest: MessageFns<VerifyLoginSessionRequest> = {
  encode(message: VerifyLoginSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionID !== "") {
      writer.uint32(10).string(message.sessionID);
    }
    if (message.platform !== "") {
      writer.uint32(18).string(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyLoginSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyLoginSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyLoginSessionRequest {
    return {
      sessionID: isSet(object.sessionID) ? globalThis.String(object.sessionID) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
    };
  },

  toJSON(message: VerifyLoginSessionRequest): unknown {
    const obj: any = {};
    if (message.sessionID !== "") {
      obj.sessionID = message.sessionID;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyLoginSessionRequest>, I>>(base?: I): VerifyLoginSessionRequest {
    return VerifyLoginSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyLoginSessionRequest>, I>>(object: I): VerifyLoginSessionRequest {
    const message = createBaseVerifyLoginSessionRequest();
    message.sessionID = object.sessionID ?? "";
    message.platform = object.platform ?? "";
    return message;
  },
};

function createBaseVerifyLoginSessionResponse(): VerifyLoginSessionResponse {
  return { ip: "", host: "", os: "" };
}

export const VerifyLoginSessionResponse: MessageFns<VerifyLoginSessionResponse> = {
  encode(message: VerifyLoginSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip !== "") {
      writer.uint32(10).string(message.ip);
    }
    if (message.host !== "") {
      writer.uint32(18).string(message.host);
    }
    if (message.os !== "") {
      writer.uint32(26).string(message.os);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyLoginSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyLoginSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.os = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyLoginSessionResponse {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      os: isSet(object.os) ? globalThis.String(object.os) : "",
    };
  },

  toJSON(message: VerifyLoginSessionResponse): unknown {
    const obj: any = {};
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.os !== "") {
      obj.os = message.os;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyLoginSessionResponse>, I>>(base?: I): VerifyLoginSessionResponse {
    return VerifyLoginSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyLoginSessionResponse>, I>>(object: I): VerifyLoginSessionResponse {
    const message = createBaseVerifyLoginSessionResponse();
    message.ip = object.ip ?? "";
    message.host = object.host ?? "";
    message.os = object.os ?? "";
    return message;
  },
};

export interface SessionService {
  VerifyLoginSession(
    request: DeepPartial<VerifyLoginSessionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<VerifyLoginSessionResponse>;
}

export class SessionServiceClientImpl implements SessionService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.VerifyLoginSession = this.VerifyLoginSession.bind(this);
  }

  VerifyLoginSession(
    request: DeepPartial<VerifyLoginSessionRequest>,
    metadata?: grpc.Metadata,
  ): Promise<VerifyLoginSessionResponse> {
    return this.rpc.unary(
      SessionServiceVerifyLoginSessionDesc,
      VerifyLoginSessionRequest.fromPartial(request),
      metadata,
    );
  }
}

export const SessionServiceDesc = { serviceName: "protos.SessionService" };

export const SessionServiceVerifyLoginSessionDesc: UnaryMethodDefinitionish = {
  methodName: "VerifyLoginSession",
  service: SessionServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return VerifyLoginSessionRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = VerifyLoginSessionResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
