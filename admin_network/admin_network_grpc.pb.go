// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: notch/dotshake/v1/admin_network.proto

package admin_network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminNetworkServiceClient is the client API for AdminNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminNetworkServiceClient interface {
	CreateDefaultNetwork(ctx context.Context, in *CreateDefaultAdminNetworkRequest, opts ...grpc.CallOption) (*CreateDefaultAdminNetworkResponse, error)
	LoginNetwork(ctx context.Context, in *LoginNetworkRequest, opts ...grpc.CallOption) (*LoginNetworkResponse, error)
}

type adminNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminNetworkServiceClient(cc grpc.ClientConnInterface) AdminNetworkServiceClient {
	return &adminNetworkServiceClient{cc}
}

func (c *adminNetworkServiceClient) CreateDefaultNetwork(ctx context.Context, in *CreateDefaultAdminNetworkRequest, opts ...grpc.CallOption) (*CreateDefaultAdminNetworkResponse, error) {
	out := new(CreateDefaultAdminNetworkResponse)
	err := c.cc.Invoke(ctx, "/protos.AdminNetworkService/CreateDefaultNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminNetworkServiceClient) LoginNetwork(ctx context.Context, in *LoginNetworkRequest, opts ...grpc.CallOption) (*LoginNetworkResponse, error) {
	out := new(LoginNetworkResponse)
	err := c.cc.Invoke(ctx, "/protos.AdminNetworkService/LoginNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminNetworkServiceServer is the server API for AdminNetworkService service.
// All implementations should embed UnimplementedAdminNetworkServiceServer
// for forward compatibility
type AdminNetworkServiceServer interface {
	CreateDefaultNetwork(context.Context, *CreateDefaultAdminNetworkRequest) (*CreateDefaultAdminNetworkResponse, error)
	LoginNetwork(context.Context, *LoginNetworkRequest) (*LoginNetworkResponse, error)
}

// UnimplementedAdminNetworkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminNetworkServiceServer struct {
}

func (UnimplementedAdminNetworkServiceServer) CreateDefaultNetwork(context.Context, *CreateDefaultAdminNetworkRequest) (*CreateDefaultAdminNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultNetwork not implemented")
}
func (UnimplementedAdminNetworkServiceServer) LoginNetwork(context.Context, *LoginNetworkRequest) (*LoginNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNetwork not implemented")
}

// UnsafeAdminNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminNetworkServiceServer will
// result in compilation errors.
type UnsafeAdminNetworkServiceServer interface {
	mustEmbedUnimplementedAdminNetworkServiceServer()
}

func RegisterAdminNetworkServiceServer(s grpc.ServiceRegistrar, srv AdminNetworkServiceServer) {
	s.RegisterService(&AdminNetworkService_ServiceDesc, srv)
}

func _AdminNetworkService_CreateDefaultNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultAdminNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminNetworkServiceServer).CreateDefaultNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AdminNetworkService/CreateDefaultNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminNetworkServiceServer).CreateDefaultNetwork(ctx, req.(*CreateDefaultAdminNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminNetworkService_LoginNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminNetworkServiceServer).LoginNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AdminNetworkService/LoginNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminNetworkServiceServer).LoginNetwork(ctx, req.(*LoginNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminNetworkService_ServiceDesc is the grpc.ServiceDesc for AdminNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AdminNetworkService",
	HandlerType: (*AdminNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDefaultNetwork",
			Handler:    _AdminNetworkService_CreateDefaultNetwork_Handler,
		},
		{
			MethodName: "LoginNetwork",
			Handler:    _AdminNetworkService_LoginNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notch/dotshake/v1/admin_network.proto",
}
